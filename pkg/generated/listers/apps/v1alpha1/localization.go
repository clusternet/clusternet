/*
Copyright The Clusternet Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/clusternet/clusternet/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LocalizationLister helps list Localizations.
// All objects returned here must be treated as read-only.
type LocalizationLister interface {
	// List lists all Localizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Localization, err error)
	// Localizations returns an object that can list and get Localizations.
	Localizations(namespace string) LocalizationNamespaceLister
	LocalizationListerExpansion
}

// localizationLister implements the LocalizationLister interface.
type localizationLister struct {
	indexer cache.Indexer
}

// NewLocalizationLister returns a new LocalizationLister.
func NewLocalizationLister(indexer cache.Indexer) LocalizationLister {
	return &localizationLister{indexer: indexer}
}

// List lists all Localizations in the indexer.
func (s *localizationLister) List(selector labels.Selector) (ret []*v1alpha1.Localization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Localization))
	})
	return ret, err
}

// Localizations returns an object that can list and get Localizations.
func (s *localizationLister) Localizations(namespace string) LocalizationNamespaceLister {
	return localizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocalizationNamespaceLister helps list and get Localizations.
// All objects returned here must be treated as read-only.
type LocalizationNamespaceLister interface {
	// List lists all Localizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Localization, err error)
	// Get retrieves the Localization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Localization, error)
	LocalizationNamespaceListerExpansion
}

// localizationNamespaceLister implements the LocalizationNamespaceLister
// interface.
type localizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Localizations in the indexer for a given namespace.
func (s localizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Localization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Localization))
	})
	return ret, err
}

// Get retrieves the Localization from the indexer for a given namespace and name.
func (s localizationNamespaceLister) Get(name string) (*v1alpha1.Localization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("localization"), name)
	}
	return obj.(*v1alpha1.Localization), nil
}
