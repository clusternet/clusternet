/*
Copyright The Clusternet Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/clusternet/clusternet/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeedInventoryLister helps list FeedInventories.
// All objects returned here must be treated as read-only.
type FeedInventoryLister interface {
	// List lists all FeedInventories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FeedInventory, err error)
	// FeedInventories returns an object that can list and get FeedInventories.
	FeedInventories(namespace string) FeedInventoryNamespaceLister
	FeedInventoryListerExpansion
}

// feedInventoryLister implements the FeedInventoryLister interface.
type feedInventoryLister struct {
	indexer cache.Indexer
}

// NewFeedInventoryLister returns a new FeedInventoryLister.
func NewFeedInventoryLister(indexer cache.Indexer) FeedInventoryLister {
	return &feedInventoryLister{indexer: indexer}
}

// List lists all FeedInventories in the indexer.
func (s *feedInventoryLister) List(selector labels.Selector) (ret []*v1alpha1.FeedInventory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FeedInventory))
	})
	return ret, err
}

// FeedInventories returns an object that can list and get FeedInventories.
func (s *feedInventoryLister) FeedInventories(namespace string) FeedInventoryNamespaceLister {
	return feedInventoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FeedInventoryNamespaceLister helps list and get FeedInventories.
// All objects returned here must be treated as read-only.
type FeedInventoryNamespaceLister interface {
	// List lists all FeedInventories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FeedInventory, err error)
	// Get retrieves the FeedInventory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FeedInventory, error)
	FeedInventoryNamespaceListerExpansion
}

// feedInventoryNamespaceLister implements the FeedInventoryNamespaceLister
// interface.
type feedInventoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FeedInventories in the indexer for a given namespace.
func (s feedInventoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FeedInventory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FeedInventory))
	})
	return ret, err
}

// Get retrieves the FeedInventory from the indexer for a given namespace and name.
func (s feedInventoryNamespaceLister) Get(name string) (*v1alpha1.FeedInventory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("feedinventory"), name)
	}
	return obj.(*v1alpha1.FeedInventory), nil
}
