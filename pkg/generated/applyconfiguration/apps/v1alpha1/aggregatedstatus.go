/*
Copyright The Clusternet Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// AggregatedStatusApplyConfiguration represents an declarative configuration of the AggregatedStatus type for use
// with apply.
type AggregatedStatusApplyConfiguration struct {
	FeedApplyConfiguration `json:",inline"`
	FeedStatusSummary      *FeedStatusApplyConfiguration            `json:"feedStatusSummary,omitempty"`
	FeedStatusDetails      []FeedStatusPerClusterApplyConfiguration `json:"feedStatusDetails,omitempty"`
}

// AggregatedStatusApplyConfiguration constructs an declarative configuration of the AggregatedStatus type for use with
// apply.
func AggregatedStatus() *AggregatedStatusApplyConfiguration {
	return &AggregatedStatusApplyConfiguration{}
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *AggregatedStatusApplyConfiguration) WithKind(value string) *AggregatedStatusApplyConfiguration {
	b.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *AggregatedStatusApplyConfiguration) WithAPIVersion(value string) *AggregatedStatusApplyConfiguration {
	b.APIVersion = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *AggregatedStatusApplyConfiguration) WithNamespace(value string) *AggregatedStatusApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *AggregatedStatusApplyConfiguration) WithName(value string) *AggregatedStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithFeedStatusSummary sets the FeedStatusSummary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FeedStatusSummary field is set to the value of the last call.
func (b *AggregatedStatusApplyConfiguration) WithFeedStatusSummary(value *FeedStatusApplyConfiguration) *AggregatedStatusApplyConfiguration {
	b.FeedStatusSummary = value
	return b
}

// WithFeedStatusDetails adds the given value to the FeedStatusDetails field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FeedStatusDetails field.
func (b *AggregatedStatusApplyConfiguration) WithFeedStatusDetails(values ...*FeedStatusPerClusterApplyConfiguration) *AggregatedStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFeedStatusDetails")
		}
		b.FeedStatusDetails = append(b.FeedStatusDetails, *values[i])
	}
	return b
}
