/*
Copyright The Clusternet Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// SubscriptionStatusApplyConfiguration represents an declarative configuration of the SubscriptionStatus type for use
// with apply.
type SubscriptionStatusApplyConfiguration struct {
	BindingClusters    []string                             `json:"bindingClusters,omitempty"`
	Replicas           map[string][]int32                   `json:"replicas,omitempty"`
	SpecHash           *uint64                              `json:"specHash,omitempty"`
	DesiredReleases    *int                                 `json:"desiredReleases,omitempty"`
	CompletedReleases  *int                                 `json:"completedReleases,omitempty"`
	AggregatedStatuses []AggregatedStatusApplyConfiguration `json:"aggregatedStatuses,omitempty"`
}

// SubscriptionStatusApplyConfiguration constructs an declarative configuration of the SubscriptionStatus type for use with
// apply.
func SubscriptionStatus() *SubscriptionStatusApplyConfiguration {
	return &SubscriptionStatusApplyConfiguration{}
}

// WithBindingClusters adds the given value to the BindingClusters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BindingClusters field.
func (b *SubscriptionStatusApplyConfiguration) WithBindingClusters(values ...string) *SubscriptionStatusApplyConfiguration {
	for i := range values {
		b.BindingClusters = append(b.BindingClusters, values[i])
	}
	return b
}

// WithReplicas puts the entries into the Replicas field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Replicas field,
// overwriting an existing map entries in Replicas field with the same key.
func (b *SubscriptionStatusApplyConfiguration) WithReplicas(entries map[string][]int32) *SubscriptionStatusApplyConfiguration {
	if b.Replicas == nil && len(entries) > 0 {
		b.Replicas = make(map[string][]int32, len(entries))
	}
	for k, v := range entries {
		b.Replicas[k] = v
	}
	return b
}

// WithSpecHash sets the SpecHash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SpecHash field is set to the value of the last call.
func (b *SubscriptionStatusApplyConfiguration) WithSpecHash(value uint64) *SubscriptionStatusApplyConfiguration {
	b.SpecHash = &value
	return b
}

// WithDesiredReleases sets the DesiredReleases field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DesiredReleases field is set to the value of the last call.
func (b *SubscriptionStatusApplyConfiguration) WithDesiredReleases(value int) *SubscriptionStatusApplyConfiguration {
	b.DesiredReleases = &value
	return b
}

// WithCompletedReleases sets the CompletedReleases field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CompletedReleases field is set to the value of the last call.
func (b *SubscriptionStatusApplyConfiguration) WithCompletedReleases(value int) *SubscriptionStatusApplyConfiguration {
	b.CompletedReleases = &value
	return b
}

// WithAggregatedStatuses adds the given value to the AggregatedStatuses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AggregatedStatuses field.
func (b *SubscriptionStatusApplyConfiguration) WithAggregatedStatuses(values ...*AggregatedStatusApplyConfiguration) *SubscriptionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAggregatedStatuses")
		}
		b.AggregatedStatuses = append(b.AggregatedStatuses, *values[i])
	}
	return b
}
